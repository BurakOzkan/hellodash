{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Forms","props","onSubmit","getWeather","type","name","placeholder","Weather","this","city","country","temperature","humidity","description","error","document","getElementsByClassName","style","background","React","Component","OWM_API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","window","JFCustomWidget","subscribe","console","log","result","JSON","stringify","key1","key2","sendSubmit","components_Titles","Form","components_Weather","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb69476d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () =>(\r\n\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Finder3</h1>\r\n        <p className=\"title-container__subtitle\">Find out temperature</p>\r\n    </div>\r\n\r\n);\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Forms = props => (\r\n        <div>\r\n            <form onSubmit={props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\"></input>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\"></input>\r\n                <button>GET WEATHER</button>\r\n            </form>\r\n        </div>\r\n\r\n);\r\n\r\nexport default Forms;\r\n","import React from \"react\";\r\n\r\n\r\nclass Weather extends React.Component{\t\r\n\r\n\r\n\trender(){\r\n\t\t\r\n\t\treturn(\r\n\t\t<div className=\"weather__info\">\r\n\t {\t\r\n\t \tthis.props.city && this.props.country && <p className=\"weather__key\"> Location: \r\n\t \t\t<span className=\"weather__value\"> { this.props.city }, { this.props.country }</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tthis.props.temperature && <p className=\"weather__key\"> Temperature: \r\n\t \t\t<span className=\"weather__value\"> { this.props.temperature }\t</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tthis.props.humidity && <p className=\"weather__key\"> Humidity: \r\n\t \t\t<span className=\"weather__value\"> { this.props.humidity } </span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tthis.props.description && <p className=\"weather__key\"> Conditions: \r\n\t \t\t<span className=\"weather__value\"> { this.props.description } </span>\r\n\t </p> \r\n\t }\r\n\r\n\t { \r\n\t \tthis.props.error && <p className=\"weather__error\">{ this.props.error }</p>  \r\n\t }\r\n\t</div>\r\n\t);\r\n}\r\ncomponentDidUpdate(){\r\n\tconst condition = this.props.description === 'clear sky';\r\n\r\n\tif(condition){\r\n\t\tdocument.getElementsByClassName(\"title-container\")[0].style.background = \"url(\\\"https://www.studereducation.com/wp-content/uploads/2014/07/clear-sky-over-green-grass-wallpaper.jpg\\\") center center repeat\";\r\n\t\t}\r\n}\r\n\r\n}\r\n\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\n\nconst OWM_API_KEY=\"e30d47356db578e746eb3926c4cd390e\";\nclass App extends React.Component{\n  \nstate = {\n  temperature: undefined,\n  city: undefined,\n  country: undefined,\n  humidity: undefined,\n  description: undefined,\n  error: undefined  \n}\ncomponentDidMount(){\n  window.JFCustomWidget.subscribe(\"ready\",  ()=>{\n    console.log(\"Widget is ready\");\n    \n  }\n  )\n  window.JFCustomWidget.subscribe(\"submit\",  ()=>{\n    var result = {}\n    //this part will be used if your field is required. If your widget is required valid\n    //property will be expected before form can be submitted\n\n    \n    result.valid = true;\n    //this is your field result. You are expected to send value property as string\n    var obj = {\n      key1: \"val1\",\n      key2: \"value2\"\n    };\n  \n    result.value = JSON.stringify(obj);\n    \n    //most probably you will call sendSubmit method\n    window.JFCustomWidget.sendSubmit(result)\n  }\n  )\n\n  \n\n}\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    \n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${OWM_API_KEY}&units=metric`);\n    const data = await api_call.json();\n    if(city && country){\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n       });\n    }else{\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the value.\"\n      })\n    }\n\n\n    \n  }\n  \n    \n\n  render(){\n    return(\n      <div>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              \n              <div className=\"col-xs-5 title-container\">\n                <Titles />\n                \n                \n              </div>\n              \n              <div className=\"col-xs-7 form-container\">\n                <Form getWeather={this.getWeather} />\n                <Weather \n                  temperature={this.state.temperature} \n                  humidity={this.state.humidity}\n                  city={this.state.city}\n                  country={this.state.country}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n        \n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./App.css\";\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}